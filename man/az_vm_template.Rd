% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/az_vm_template.R
\docType{class}
\name{az_vm_template}
\alias{az_vm_template}
\title{Virtual machine template class}
\format{An R6 object of class \code{az_vm_template}, inheriting from \code{AzureRMR::az_template}.}
\usage{
az_vm_template
}
\description{
Class representing a virtual machine deployment template. This class keeps track of all resources that are created as part of deploying a VM, and exposes methods for managing them.
}
\details{
The VM operations listed above are actually provided by the \link{az_vm_resource} class, and propagated to the template as active bindings.

A single virtual machine in Azure is actually a collection of resources, including any and all of the following.
\itemize{
\item Network interface (Azure resource type \code{Microsoft.Network/networkInterfaces})
\item Network security group (Azure resource type \code{Microsoft.Network/networkSecurityGroups})
\item Virtual network (Azure resource type \code{Microsoft.Network/virtualNetworks})
\item Public IP address (Azure resource type \code{Microsoft.Network/publicIPAddresses})
\item The VM itself (Azure resource type \code{Microsoft.Compute/virtualMachines})
}

By wrapping the deployment template used to create these resources, the \code{az_vm_template} class allows managing them all as a single entity.
}
\section{Methods}{

The following methods are available, in addition to those provided by the \link[AzureRMR:az_template]{AzureRMR::az_template} class.
\itemize{
\item \code{start(wait=TRUE)}: Start the VM. By default, wait until the startup process is complete.
\item \code{stop(deallocate=TRUE, wait=FALSE)}: Stop the VM. By default, deallocate it as well.
\item \code{restart(wait=TRUE)}: Restart the VM.
\item \code{run_deployed_command(command, parameters, script)}: Run a PowerShell command on the VM.
\item \code{run_script(script, parameters)}: Run a script on the VM. For a Linux VM, this will be a shell script; for a Windows VM, a PowerShell script. Pass the script as a character vector.
\item \code{sync_vm_status()}: Check the status of the VM.
\item \code{resize(size, deallocate=FALSE, wait=FALSE)}: Resize the VM. Optionally stop and deallocate it first (may sometimes be necessary).
\item \code{get_public_ip_address(nic=1, config=1)}: Get the public IP address of the VM. Returns NULL if the VM is stopped, or is not publicly accessible.
\item \code{get_private_ip_address(nic=1, config=1)}: Get the private IP address of the VM.
\item \code{add_extension(publisher, type, version, settings=list(), protected_settings=list(), key_vault_settings=list())}: Add an extension to the VM.
\item \code{do_vm_operation(...)}: Carries out an arbitrary operation on the VM resource. See the \code{do_operation} method of the \link[AzureRMR:az_resource]{AzureRMR::az_resource} class for more details.
}
}

\examples{
\dontrun{

sub <- AzureRMR::get_azure_login()$
    get_subscription("subscription_id")

vm <- sub$get_vm("myLinuxDSVM")

# start the VM
vm$start()

# run a shell command
vm$run_script("ifconfig > /tmp/ifc.out")

# stop (and deallocate) the VM
vm$stop()

# resize the VM
vm$resize("Standard_DS13_v2")

# get the VM status
vm$sync_vm_status()

}
}
\seealso{
\link[AzureRMR:az_template]{AzureRMR::az_template}, \link{create_vm}, \link{get_vm}, \link{delete_vm}

\href{https://docs.microsoft.com/en-us/rest/api/compute/virtualmachines}{VM API reference}
}
\keyword{datasets}
